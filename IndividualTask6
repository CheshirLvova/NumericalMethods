{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# IНДИВIДУАЛЬНЕ ЗАВДАННЯ №6"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Використовуючи квадатурні формули прямокутників, трапецій та парабол, обчислитиінтеграли від заданих функцій із заданою точністю $\\varepsilon$. Для досягнення точності, подрібнювати крок розбиття проміжного кроку $h$. Вивести, крім обчисленого інтегралу, кількість ітерацій по кожній квадратурній формулі та порядок збіжності квадратурної формули."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Початкові дані "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Функція: f(x) = (e**x / 2)*(cos(x)-sin(x))\n",
      "Точність: 0.001\n"
     ]
    }
   ],
   "source": [
    "import math \n",
    "import numpy as np\n",
    "\n",
    "\n",
    "def f(x):\n",
    "    return  (math.e**x / 2)*(math.cos(x)-math.sin(x))\n",
    "\n",
    "n = 4  \n",
    "a = 2.\n",
    "b = 3.\n",
    "Si = []\n",
    "print(\"Функція: f(x) = (e**x / 2)*(cos(x)-sin(x))\")\n",
    "print(\"Точність: 0.001\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Метод прямокутників"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Результат:  -10.297317477276613\n",
      "Результат за формулою лівих прямокутників:  -7.576924395545134\n",
      "Результат за формулою правих прямокутників:  -9.192576890365931\n"
     ]
    }
   ],
   "source": [
    "def integration(a,b,n):\n",
    "    h = (b-a)/n\n",
    "    r = f(a) + f(b)\n",
    "    i = 1\n",
    "    while i < n:\n",
    "        x = a + i*h\n",
    "        r = r + 4 * f(x)\n",
    "        i = i + 1\n",
    "        x = a + i * h\n",
    "        r = r +2*f(x)\n",
    "        i = i + 1\n",
    "    r = r * h / 3\n",
    "    print(\"Результат: \", r) \n",
    "\n",
    "def rectangles(a,b,n):\n",
    "    \n",
    "    z = (b-a)/n\n",
    "    i = a\n",
    "    s1=0\n",
    "    s2=0\n",
    "    while i<b:\n",
    "        \n",
    "        s1=s1+f(i)*z\n",
    "        i=i+z\n",
    "    i=a \n",
    "    while i<b:\n",
    "        i=i+z\n",
    "        s2=s2+f(i)*z\n",
    "\n",
    "    print('Результат за формулою лівих прямокутників: ',s1)\n",
    "    print('Результат за формулою правих прямокутників: ',s2)\n",
    "\n",
    "integration(a,b,n)\n",
    "rectangles(a,b,n)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Метод трапецій "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Результат:  -22.12539445092147\n"
     ]
    }
   ],
   "source": [
    "import math \n",
    "import numpy as np\n",
    "\n",
    "n = 4 \n",
    "a = 2.\n",
    "b = 3.\n",
    "def f(x):\n",
    "    return  (math.e**x / 2)*(math.cos(x)-math.sin(x))\n",
    "\n",
    "def trapezoid(a,b,n):\n",
    "  z = (b-a)/n\n",
    "  i=a\n",
    "  s=0\n",
    "  while (i+z)<b:\n",
    "    s=s+f(i)\n",
    "    i=i+z \n",
    "  s=z*(f(a)+f(b))/2+s\n",
    "  print('Результат: ',s)\n",
    "trapezoid(a,b,n)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Метод парабол (Сімпсона)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Результат:  -8.404153016168566\n"
     ]
    }
   ],
   "source": [
    "import math \n",
    "import numpy as np\n",
    "\n",
    "\n",
    "f = lambda x: (math.e**x / 2)*(math.cos(x)-math.sin(x))\n",
    "\n",
    "n = 10000  \n",
    "a = 2.0\n",
    "b = 3.0\n",
    "\n",
    "def simpsone(a, b, n, func):\n",
    "    h = float((b-a)/n)\n",
    "    s = (func(a) + func(b)) * 0.5\n",
    "    for i in np.arange(0, n-1):\n",
    "        xk = a + h*i\n",
    "        xk1 = a + h*(i-1)\n",
    "        s = s + func(xk) + 2*func((xk1+xk)/2)\n",
    "    x = a + h*n\n",
    "    x1 = a + h*(n-1)\n",
    "    s += 2 *func((x1 + x)/2)\n",
    "    return s*h/3.0\n",
    "\n",
    "print(\"Результат: \", simpsone(a, b, n, f))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
